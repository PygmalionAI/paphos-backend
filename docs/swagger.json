{
    "swagger": "2.0",
    "info": {
        "description": "Base backend API to serve Pygamillion UI",
        "title": "Paphos API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "tobedefined.com",
    "basePath": "/api/v1",
    "paths": {
        "/characters": {
            "get": {
                "description": "Returns a JSON list of all the characters registered in the databases with the possibility of pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Characters"
                ],
                "summary": "List gets all Characters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Character"
                            }
                        }
                    }
                }
            }
        },
        "/characters/": {
            "post": {
                "description": "Returns a JSON data of the given character ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Characters"
                ],
                "summary": "Inserts a new a Character to the DB",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Character"
                        }
                    }
                }
            }
        },
        "/characters/{character_id}": {
            "get": {
                "description": "Returns a JSON data of the given character ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Characters"
                ],
                "summary": "Show gets the data for one Character",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Character ID",
                        "name": "character_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Character"
                        }
                    }
                }
            },
            "put": {
                "description": "Returns a JSON data of the given character ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Characters"
                ],
                "summary": "Updates a Character inside the DB",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Character ID",
                        "name": "character_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Character"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Logs a user in by returning a session JWT.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Log the user in.",
                "parameters": [
                    {
                        "description": "Login Body",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/actions.LoginParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Registers a new User in the DB.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Registers a new User",
                "parameters": [
                    {
                        "description": "Register Body",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/actions.RegisterParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "actions.LoginParameters": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "actions.RegisterParameters": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "passwordConfirmation": {
                    "type": "string"
                }
            }
        },
        "models.Character": {
            "type": "object",
            "properties": {
                "avatar_id": {
                    "$ref": "#/definitions/nulls.String"
                },
                "contentious": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "example_chats": {
                    "$ref": "#/definitions/nulls.String"
                },
                "greeting": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "persona": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                },
                "world_scenario": {
                    "$ref": "#/definitions/nulls.String"
                }
            }
        },
        "nulls.String": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}